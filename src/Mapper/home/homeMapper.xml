<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="homeMapper">
    <!-- 사용자 정보 조회 -->
    <select id="loginCheck" parameterType="map" resultType="map">
		SELECT USER_ID
			 , CASE WHEN #{PASSWORD} = PASSWORD THEN 'O' ELSE 'X' END AS PASSWD
			 , PASSWORD
			 , USER_NM
			 , PDEPT_CD
			 , (SELECT dbo.FN_COMMON_NM('DEPT', PDEPT_CD)) AS PDEPT_NM
			 , DEPT_CD
			 , (SELECT dbo.FN_COMMON_NM('DEPT', DEPT_CD)) AS DEPT_NM
			 , GRADE_CD
			 , (SELECT dbo.FN_COMMON_NM('ROLE', GRADE_CD)) AS GRADE_NM
			 , ENTER_DT
			 , BIRTHDAY
			 , EMAIL
			 , PHONE_NUM
			 , AUTH_TYPE_CD
			 , 'KOR' AS LANG
			 , (SELECT TOP 1 CONNECT_START_DT FROM CONNECT_INFO WHERE USER_ID = #{USER_ID} ORDER BY CONNECT_START_DT DESC) AS CONNECT_DT
		  FROM USER_INFO
		 WHERE USER_ID = #{USER_ID}
		   AND PASSWORD = #{PASSWORD}
    </select>

    <!-- 사용자 권한별 메뉴 조회 -->
    <select id="userMenuList" parameterType="map" resultType="map">
		SELECT A.MENU_ID
			 , A.MENU_PID
			 , A.MENU_TYPE
			 , A.MENU_NAME
			 , A.MENU_DES
			 , A.PROG_ID
			 , A.PROG_PATH
			 , A.MENU_GROUP
			 , A.SORT_NO
			 , A.USE_YN
			 , A.MEMO
		  FROM MENU_INFO A
		 WHERE A.USE_YN = 'Y'
		   AND (A.MENU_ID IN (SELECT MENU_ID
		   						FROM MENU_INFO
		   					   WHERE MENU_GROUP = 'GRP01')
		    OR A.MENU_ID IN (SELECT DISTINCT D.MENU_ID
							   FROM AUTH_TYPE_DETAIL D
							  WHERE AUTH_TYPE_CD = #{AUTH_TYPE_CD})
			OR A.MENU_ID IN (SELECT DISTINCT MENU_PID
							   FROM MENU_INFO
							  WHERE MENU_ID IN (SELECT DISTINCT D.MENU_ID
							  					  FROM AUTH_TYPE_DETAIL D
							  					 WHERE AUTH_TYPE_CD = #{AUTH_TYPE_CD})))
		 ORDER BY A.MENU_ID, A.SORT_NO
    </select>

    <!-- 접속 정보 저장 -->
    <insert id="insertConnectInfo" parameterType="map">
		EXEC CM0000_CONNECT_INS #{SESSION_ID}, #{USER_ID}, #{DEPT_CD}, #{USER_NM}, #{CONNECT_IP}
    </insert>

	<!-- 연차 관련 조회 -->
	<select id="userAndHolidayInfo" resultType="com.hs.an.dto.UserAndHolidayInfoDto">
		SELECT U.USER_ID,
			   U.ENTER_DT,
			   H.HOLIDAY_TOTAL,
			   H.HOLIDAY_USE,
			   H.HOLIDAY_REMAIN,
			   H.HOLIDAY_DEDUCT
		FROM USER_INFO U LEFT JOIN HOLIDAY_INFO H ON(U.USER_ID = H.USER_ID)
		WHERE U.ENTER_DT IS NOT NULL
	</select>

	<!-- 연차 업데이트 -->
	<update id="userHolidayUpdate" parameterType="com.hs.an.dto.UserAndHolidayInfoDto">
        UPDATE HOLIDAY_INFO SET HOLIDAY_TOTAL = #{HOLIDAY_TOTAL},
                                HOLIDAY_USE = #{HOLIDAY_USE},
                                HOLIDAY_REMAIN = #{HOLIDAY_REMAIN},
                                HOLIDAY_DEDUCT = #{HOLIDAY_DEDUCT},
								UPT_ID = #{UPT_ID},
                            	UPT_DT = GETDATE()
                            WHERE USER_ID = #{USER_ID}
	</update>

	<!-- 회사 휴무 미사용자 조회 -->
	<select id="holidayOfficeNotSubmit" resultType="com.hs.an.dto.HolidayOfficeNotSubmitDto">
		DECLARE @HOLIDAY VARCHAR(10) = (SELECT MIN(hc.OFFICE_HOLIDAY) AS companyday FROM HOLIDAY_OFFICE hc WHERE DATEPART(MONTH, CONVERT(DATE, hc.OFFICE_HOLIDAY)) = DATEPART(MONTH, CONVERT(DATE, getdate())))

		SELECT U.USER_ID, U.DEPT_CD, @HOLIDAY as HOLIDAY_DATE, count(H.HOLIDAY_TYPE) AS STATUS
		FROM USER_INFO U LEFT JOIN HOLIDAY_PERSON H ON (U.USER_ID = H.USER_ID AND H.HOLIDAY_TYPE IN ('OFFICE01', 'OFFICE02')
			AND H.HOLIDAY_START = @HOLIDAY AND H.HOLIDAY_END = @HOLIDAY)
		WHERE U.USE_YN = 'Y' AND U.PDEPT_CD != ''
		GROUP BY U.USER_ID, U.DEPT_CD HAVING COUNT(H.HOLIDAY_TYPE) &lt; 1
	</select>

	<!-- 회사 휴무 미사용자 휴가 등록 -->
	<insert id="holidayOfficeNotSubmitSave" parameterType="java.util.List">
		INSERT INTO HOLIDAY_PERSON (USER_ID, HOLIDAY_TYPE, HOLIDAY_CNT, HOLIDAY_START, HOLIDAY_END, HOLIDAY_REASON, REG_ID, REG_DT) VALUES
		<foreach collection="list" item="item" separator=", ">
			(#{item.USER_ID}, 'OFFICE01', '1', #{item.HOLIDAY_DATE}, #{item.HOLIDAY_DATE}, '회사 휴무', 'admin', GETDATE())
		</foreach>
	</insert>
</mapper>